"use strict";

const BloodRequest = require("../models/bloodRequest.model");
const { getInfoData } = require("../utils");
const { BadRequestError } = require("../configs/error.response");
const { BLOOD_REQUEST_STATUS, BLOOD_COMPONENT } = require("../constants/enum");
const bloodGroupModel = require("../models/bloodGroup.model");
const userModel = require("../models/user.model");
const { uploadSingleImage } = require("../helpers/cloudinaryHelper");

class BloodRequestService {
  // T·∫°o y√™u c·∫ßu m√°u
createBloodRequest = async ({ bloodType, files, ...requestData }, userId) => {
  // Step 1: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
  const user = await userModel.findById(userId);
  if (!user) {
    throw new BadRequestError("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
  }

  // Step 2: Resolve bloodId t·ª´ bloodType
  const bloodGroup = await bloodGroupModel.findOne({ name: bloodType });
  if (!bloodGroup) {
    throw new BadRequestError("Nh√≥m m√°u kh√¥ng h·ª£p l·ªá");
  }

  // Step 3: Validate d·ªØ li·ªáu b·∫Øt bu·ªôc
  if (
    !requestData.bloodComponent ||
    !requestData.quantity ||
    !requestData.preferredDate ||
    !requestData.consent
  ) {
    throw new BadRequestError(
      "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: th√†nh ph·∫ßn m√°u, s·ªë l∆∞·ª£ng, ng√†y y√™u c·∫ßu, ho·∫∑c ƒë·ªìng √Ω"
    );
  }

  if (!Object.values(BLOOD_COMPONENT).includes(requestData.bloodComponent)) {
    throw new BadRequestError("Th√†nh ph·∫ßn m√°u kh√¥ng h·ª£p l·ªá");
  }

  if (parseInt(requestData.quantity) < 1) {
    throw new BadRequestError("S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë d∆∞∆°ng");
  }

  // Step 4: X·ª≠ l√Ω file t·∫£i l√™n (1-5 file)
  let medicalDocumentUrls = [];
  if (files && files.length > 0) {
    if (files.length > 5) {
      throw new BadRequestError("Ch·ªâ ƒë∆∞·ª£c t·∫£i l√™n t·ªëi ƒëa 5 file");
    }
    if (files.length < 1) {
      throw new BadRequestError("C·∫ßn t·∫£i l√™n √≠t nh·∫•t 1 file");
    }
    medicalDocumentUrls = await Promise.all(
      files.map((file) =>
        uploadSingleImage({
          file,
          folder: "bloodhouse/medical-documents",
          options: { resource_type: "auto" },
        }).then((result) => result.url)
      )
    );
  } else {
    throw new BadRequestError("C·∫ßn t·∫£i l√™n √≠t nh·∫•t 1 file t√†i li·ªáu y t·∫ø");
  }

  // Step 5: T·∫°o y√™u c·∫ßu m√°u
  const bloodRequest = await BloodRequest.create({
    bloodId: bloodGroup._id,
    userId,
    patientName: user.fullName,
    patientAge: user.age || "",
    contactName: user.fullName,
    contactPhone: user.phone || "",
    contactEmail: user.email,
    bloodComponent: requestData.bloodComponent,
    quantity: parseInt(requestData.quantity),
    isUrgent: requestData.isUrgent === "true" || requestData.isUrgent === true,
    status: BLOOD_REQUEST_STATUS.PENDING,
    location: {
      type: "Point",
      coordinates: [parseFloat(requestData.lng) || 0, parseFloat(requestData.lat) || 0],
    },
    street: requestData.street,
    city: requestData.city,
    reason: requestData.reason,
    medicalDetails: requestData.medicalDetails,
    medicalDocumentUrl: medicalDocumentUrls,
    note: requestData.note,
    preferredDate: new Date(requestData.preferredDate),
    consent: requestData.consent === "true" || requestData.consent === true,
    facilityId: requestData.facilityId,
  });

  // Step 6: Populate v√† tr·∫£ v·ªÅ d·ªØ li·ªáu
  const result = await bloodRequest.populate("userId", "fullName email phone");
  console.log("üöÄ ~ BloodRequestService ~ createBloodRequest= ~ result:", result)
  return getInfoData({
      fields: ["_id", "bloodId", "userId", "facilityId", "patientName", "patientAge", "bloodComponent", "quantity", "isUrgent", "status", "location", "street", "city", "contactName", "contactPhone", "contactEmail", "reason", "medicalDetails", "medicalDocumentUrl", "note", "preferredDate", "consent", "createdAt", "updatedAt"],
      object: result,
    });
  };
}

module.exports = new BloodRequestService();