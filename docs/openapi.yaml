openapi: 3.0.3
info:
  title: BloodHouse API
  description: API for BloodHouse - Blood Donation Management System
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local Development

paths:
  /auth/sign-up:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: Nguyen Van A
                  description: Họ và tên đầy đủ
                email:
                  type: string
                  format: email
                  example: nguyenvana@example.com
                  description: Địa chỉ email
                password:
                  type: string
                  format: password
                  example: Password123!
                  description: Mật khẩu
                sex:
                  type: string
                  enum: [male, female, other]
                  example: male
                  description: Giới tính
                yob:
                  type: string
                  format: date
                  example: "1990-01-01"
                  description: Năm sinh
                phone:
                  type: string
                  example: "0123456789"
                  description: Số điện thoại
                street:
                  type: string
                  example: "123 Le Loi"
                  description: Địa chỉ đường
                city:
                  type: string
                  example: "Ho Chi Minh"
                  description: Thành phố
                country:
                  type: string
                  example: "Vietnam"
                  description: Quốc gia
                idCard:
                  type: string
                  example: "012345678912"
                  description: Số căn cước công dân
              required:
                - fullName
                - email
                - password
      responses:
        "200":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "60d0fe4f5311236168a109ca"
                      fullName:
                        type: string
                        example: Nguyen Van A
                      email:
                        type: string
                        format: email
                        example: nguyenvana@example.com
                      role:
                        type: string
                        enum: [MEMBER, STAFF, ADMIN]
                        example: MEMBER
                      idCard:
                        type: string
                        example: "012345678912"
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken:
                        type: string
                        example: dGhpcyBpcyBhIHJlZnJlc2ggdG9rZW4...
        "400":
          description: Bad request (e.g., email already exists, validation errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email already exists"
  /auth/sign-in:
    post:
      summary: User login with email or phone
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                  example: nguyenvana@example.com
                  description: Email hoặc số điện thoại dùng để đăng nhập
                password:
                  type: string
                  format: password
                  example: Password123!
              required:
                - emailOrPhone
                - password
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "60d0fe4f5311236168a109ca"
                      fullName:
                        type: string
                        example: Nguyen Van A
                      email:
                        type: string
                        format: email
                        example: nguyenvana@example.com
                      role:
                        type: string
                        enum: [MEMBER, STAFF, ADMIN]
                        example: MEMBER
                      avatar:
                        type: string
                        nullable: true
                        example: "https://example.com/avatar.jpg"
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken:
                        type: string
                        example: dGhpcyBpcyBhIHJlZnJlc2ggdG9rZW4...
        "400":
          description: Bad request (e.g., invalid credentials)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or phone does not exist"
  /auth/sign-out:
    post:
      summary: User logout
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful
        "400":
          description: Bad request (e.g., user not found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/refresh-token:
    post:
      summary: Refresh access and refresh tokens
      tags:
        - Authentication
      security:
        - bearerAuth: [] # Yêu cầu token xác thực (tương ứng với middleware checkAuth)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  description: Refresh token được cấp trước đó
              required:
                - refreshToken
      responses:
        "200":
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Refresh token successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: "60d0fe4f5311236168a109ca"
                          fullName:
                            type: string
                            example: Nguyen Van A
                          email:
                            type: string
                            format: email
                            example: nguyenvana@example.com
                          role:
                            type: string
                            enum: [MEMBER, STAFF, ADMIN]
                            example: MEMBER
                      tokens:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                          refreshToken:
                            type: string
                            example: dGhpcyBpcyBhIHJlZnJlc2ggdG9rZW4...
        "400":
          description: Bad request (e.g., invalid or expired refresh token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid refresh token
        "401":
          description: Unauthorized (e.g., missing or invalid access token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
  /user/nearby:
    get:
      summary: Find users near a location
      tags:
        - Users
      parameters:
        - in: query
          name: lat
          schema:
            type: number
            example: 10.776
          required: true
          description: Latitude of the center point
        - in: query
          name: lng
          schema:
            type: number
            example: 106.700
          required: true
          description: Longitude of the center point
        - in: query
          name: distance
          schema:
            type: number
            example: 5
          required: true
          description: Maximum distance in kilometers
        - in: query
          name: bloodType
          schema:
            type: string
            example: A+
          description: Filter by blood type (optional)
      responses:
        "200":
          description: Nearby users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Nearby users retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        fullName:
                          type: string
                        email:
                          type: string
                        phone:
                          type: string
                        bloodId:
                          type: string
                        bloodGroup:
                          type: object
                          properties:
                            type:
                              type: string
                        location:
                          type: object
                          properties:
                            type:
                              type: string
                              example: Point
                            coordinates:
                              type: array
                              items:
                                type: number
                        isAvailable:
                          type: boolean
                        distance:
                          type: number
                          description: Distance in kilometers
        "400":
          description: Bad request (e.g., invalid blood type)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/blood-group:
    patch:
      summary: Update user's blood group
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bloodId:
                  type: string
                  example: 60f7b3a4b9c4e1234567891
              required:
                - bloodId
      responses:
        "200":
          description: Blood group updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blood group updated successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      fullName:
                        type: string
                      email:
                        type: string
                      bloodId:
                        type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/profile:
    patch:
      summary: Update user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: Nguyen Van B
                phone:
                  type: string
                  example: 0987654321
                street:
                  type: string
                city:
                  type: string
                country:
                  type: string
                lat:
                  type: number
                  example: 10.776
                lng:
                  type: number
                  example: 106.700
                sex:
                  type: string
                  enum: [male, female]
                yob:
                  type: string
                  format: date
                  example: 1990-01-01
                isAvailable:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      fullName:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      street:
                        type: string
                      city:
                        type: string
                      country:
                        type: string
                      location:
                        type: object
                        properties:
                          type:
                            type: string
                          coordinates:
                            type: array
                            items:
                              type: number
                      sex:
                        type: string
                      yob:
                        type: string
                        format: date
                      isAvailable:
                        type: boolean
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/verify-email:
    post:
      summary: Send verification email
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification email sent successfully
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        "400":
          description: Bad request (e.g., user already verified)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/verify:
    post:
      summary: Verify user account with OTP
      tags:
        - Users
      security:
        - bearerAuth: [] # Giả định có middleware xác thực user, token bearer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                OTP:
                  type: string
                  example: "123456"
                  description: One-Time Password (OTP) để xác minh tài khoản
              required:
                - OTP
      responses:
        "200":
          description: Account verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account verified successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "60d0fe4f5311236168a109ca"
                      fullName:
                        type: string
                        example: Nguyen Van A
                      email:
                        type: string
                        format: email
                        example: nguyenvana@example.com
                      isVerified:
                        type: boolean
                        example: true
                      status:
                        type: string
                        example: ACTIVE
        "400":
          description: Bad request (e.g., invalid or expired OTP)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (e.g., missing or invalid access token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/password:
    patch:
      summary: Change user password
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  format: password
                  example: Password123!
                newPassword:
                  type: string
                  format: password
                  example: NewPass456!
              required:
                - oldPassword
                - newPassword
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed successfully
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        "400":
          description: Bad request (e.g., incorrect old password)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/avatar:
    patch:
      summary: Update user avatar
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  example: https://example.com/avatar.jpg
              required:
                - avatar
      responses:
        "200":
          description: Avatar updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Avatar updated successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      fullName:
                        type: string
                      email:
                        type: string
                      avatar:
                        type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/me:
    get:
      summary: Get current user info
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User info retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User info retrieved successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      fullName:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      street:
                        type: string
                      city:
                        type: string
                      country:
                        type: string
                      location:
                        type: object
                        properties:
                          type:
                            type: string
                          coordinates:
                            type: array
                            items:
                              type: number
                      sex:
                        type: string
                      yob:
                        type: string
                        format: date
                      bloodId:
                        type: object
                        properties:
                          type:
                            type: string
                      avatar:
                        type: string
                      isAvailable:
                        type: boolean
                      isVerified:
                        type: boolean
                      status:
                        type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user:
    delete:
      summary: Deactivate user account
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account deactivated successfully
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/forgot-password:
    post:
      summary: Request password reset
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: nguyenvana@example.com
              required:
                - email
      responses:
        "200":
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset email sent successfully
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        "404":
          description: Email not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/reset-password:
    post:
      summary: Reset user password
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: 6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t1u
                newPassword:
                  type: string
                  format: password
                  example: NewPass456!
              required:
                - token
                - newPassword
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successfully
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        "400":
          description: Bad request (e.g., invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /blood-group:
    get:
      summary: Get all blood groups
      tags:
        - Blood Group
      responses:
        "200":
          description: Blood groups retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                      example: "A+"
                    note:
                      type: string
                      example: "Most common blood type"
                    characteristics:
                      type: string
                      example: "Contains A antigen on red blood cells"
                    populationRate:
                      type: number
                      example: 35.7
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    post:
      summary: Create a new blood group
      tags:
        - Blood Group
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "A+"
                note:
                  type: string
                  example: "Most common blood type"
                characteristics:
                  type: string
                  example: "Contains A antigen on red blood cells"
                populationRate:
                  type: number
                  example: 35.7
              required:
                - name
      responses:
        "201":
          description: Blood group created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  note:
                    type: string
                  characteristics:
                    type: string
                  populationRate:
                    type: number
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /blood-group/{id}:
    put:
      summary: Update a blood group
      tags:
        - Blood Group
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Blood group ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "A+"
                note:
                  type: string
                  example: "Most common blood type"
                characteristics:
                  type: string
                  example: "Contains A antigen on red blood cells"
                populationRate:
                  type: number
                  example: 35.7
      responses:
        "200":
          description: Blood group updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  note:
                    type: string
                  characteristics:
                    type: string
                  populationRate:
                    type: number
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Blood group not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /blood-component:
    get:
      summary: Get all blood components
      tags:
        - Blood Component
      responses:
        "200":
          description: Blood components retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                      example: "Plasma"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    post:
      summary: Create a new blood component
      tags:
        - Blood Component
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Plasma"
              required:
                - name
      responses:
        "201":
          description: Blood component created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /blood-component/{id}:
    put:
      summary: Update a blood component
      tags:
        - Blood Component
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Blood component ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Plasma"
      responses:
        "200":
          description: Blood component updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Blood component not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /blood-compatibility:
    get:
      summary: Get blood compatibility information
      tags:
        - Blood Compatibility
      parameters:
        - in: query
          name: bloodGroupId
          required: true
          schema:
            type: string
          description: Blood group ID to check compatibility
        - in: query
          name: componentId
          required: true
          schema:
            type: string
          description: Blood component ID to check compatibility
      responses:
        "200":
          description: Blood compatibility information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  canDonateTo:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: "AB+"
                  canReceiveFrom:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: "O-"
    post:
      summary: Create a new blood compatibility record
      tags:
        - Blood Compatibility
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bloodGroupId:
                  type: string
                  description: ID of the blood group
                componentId:
                  type: string
                  description: ID of the blood component
                canDonateTo:
                  type: array
                  items:
                    type: string
                  description: Array of blood group IDs that can receive this blood
                canReceiveFrom:
                  type: array
                  items:
                    type: string
                  description: Array of blood group IDs that can donate to this blood
              required:
                - bloodGroupId
                - componentId
                - canDonateTo
                - canReceiveFrom
      responses:
        "201":
          description: Blood compatibility created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  bloodGroupId:
                    type: string
                  componentId:
                    type: string
                  canDonateTo:
                    type: array
                    items:
                      type: string
                  canReceiveFrom:
                    type: array
                    items:
                      type: string
  /blood-donation-registrations:
    post:
      summary: Đăng ký hiến máu
      tags:
        - Blood Donation Registration
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                facilityId:
                  type: string
                  example: 60f7b3a4b9c4e1234567892
                bloodGroupId:
                  type: string
                  example: 60f7b3a4b9c4e1234567891
                bloodComponent:
                  type: string
                  enum: [Máu toàn phần, Hồng cầu, Huyết tương, Tiểu cầu]
                preferredDate:
                  type: string
                  format: date-time
                  example: 2025-06-01T10:00:00Z
                source:
                  type: string
                  enum: [Tự nguyện, Yêu cầu]
                notes:
                  type: string
              required:
                - facilityId
                - bloodGroupId
      responses:
        "201":
          description: Đăng ký hiến máu thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Đăng ký hiến máu thành công
                  data:
                    $ref: "#/components/schemas/BloodDonationRegistration"
        "400":
          description: Yêu cầu không hợp lệ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: Lấy danh sách đăng ký hiến máu
      tags:
        - Blood Donation Registration
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, approved, rejected]
        - in: query
          name: facilityId
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: Lấy danh sách đăng ký hiến máu thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Lấy danh sách đăng ký hiến máu thành công
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodDonationRegistration"
        "400":
          description: Yêu cầu không hợp lệ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /blood-donation-registrations/user:
    get:
      summary: Lấy danh sách đăng ký hiến máu của người dùng
      tags:
        - Blood Donation Registration
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, approved, rejected]
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: Lấy danh sách đăng ký hiến máu của người dùng thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Lấy danh sách đăng ký hiến máu của người dùng thành công
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodDonationRegistration"
        "400":
          description: Yêu cầu không hợp lệ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /blood-donation-registrations/{id}:
    get:
      summary: Lấy chi tiết một đăng ký hiến máu
      tags:
        - Blood Donation Registration
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID đăng ký hiến máu
      responses:
        "200":
          description: Lấy chi tiết đăng ký hiến máu thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Lấy chi tiết đăng ký hiến máu thành công
                  data:
                    $ref: "#/components/schemas/BloodDonationRegistration"
        "404":
          description: Không tìm thấy đăng ký
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Phê duyệt hoặc cập nhật đăng ký hiến máu
      tags:
        - Blood Donation Registration
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID đăng ký hiến máu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, approved, rejected]
              required:
                - status
      responses:
        "200":
          description: Cập nhật đăng ký hiến máu thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cập nhật đăng ký hiến máu thành công
                  data:
                    $ref: "#/components/schemas/BloodDonationRegistration"
        "404":
          description: Không tìm thấy đăng ký
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /blood-donations:
    post:
      summary: Tạo bản ghi hiến máu
      tags:
        - BloodDonation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: 60f7b3a4b9c4e1234567890
                bloodGroupId:
                  type: string
                  example: 60f7b3a4b9c4e1234567891
                bloodDonationRegistrationId:
                  type: string
                  example: 60f7b3a4b9c4e1234567892
                bloodComponent:
                  type: string
                  enum: [Máu toàn phần, Hồng cầu, Huyết tương, Tiểu cầu]
                quantity:
                  type: number
                  example: 350
                donationDate:
                  type: string
                  format: date-time
                  example: 2025-06-01T10:00:00Z
              required:
                - userId
                - bloodGroupId
                - bloodComponent
                - quantity
                - donationDate
      responses:
        "201":
          description: Tạo bản ghi hiến máu thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tạo bản ghi hiến máu thành công
                  data:
                    $ref: "#/components/schemas/BloodDonation"
        "400":
          description: Yêu cầu không hợp lệ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: Lấy danh sách hiến máu
      tags:
        - BloodDonation
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, confirmed, cancelled, completed]
        - in: query
          name: facilityId
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: Lấy danh sách hiến máu thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Lấy danh sách hiến máu thành công
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodDonation"
        "400":
          description: Yêu cầu không hợp lệ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /blood-donations/user:
    get:
      summary: Lấy lịch sử hiến máu của người dùng
      tags:
        - BloodDonation
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: Lấy danh sách hiến máu thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Lấy danh sách hiến máu thành công
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BloodDonation"
        "400":
          description: Yêu cầu không hợp lệ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /blood-donations/{id}:
    get:
      summary: Lấy chi tiết một bản ghi hiến máu
      tags:
        - BloodDonation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID bản ghi hiến máu
      responses:
        "200":
          description: Lấy chi tiết bản ghi hiến máu thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Lấy chi tiết bản ghi hiến máu thành công
                  data:
                    $ref: "#/components/schemas/BloodDonation"
        "404":
          description: Không tìm thấy bản ghi hiến máu
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /blood-request:
    post:
      summary: Create a new blood request
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - bloodType
                - bloodComponent
                - quantity
                - preferredDate
                - consent
                - medicalDocuments
              properties:
                bloodType: { type: string, example: "A+" }
                bloodComponent:
                  {
                    type: string,
                    enum: ["whole_blood", "red_cells", "platelets", "plasma"],
                  }
                quantity: { type: number, minimum: 1 }
                isUrgent: { type: boolean, default: false }
                street: { type: string }
                city: { type: string }
                lat: { type: number }
                lng: { type: number }
                reason: { type: string }
                medicalDetails: { type: string }
                note: { type: string }
                preferredDate: { type: string, format: date-time }
                consent: { type: boolean }
                facilityId: { type: string }
                medicalDocuments:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 5
                  minItems: 1
      responses:
        "201":
          description: Blood request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data: { $ref: "#/components/schemas/BloodRequest" }
        "400":
          description: Invalid input
  /blood-request/facility:
    get:
      summary: Get all blood requests for a facility
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of records per page
        - in: query
          name: status
          schema:
            {
              type: string,
              enum:
                ["pending", "approved", "rejected", "fulfilled", "cancelled"],
            }
          description: Filter by request status
        - in: query
          name: search
          schema: { type: string }
          description: Search term for patientName, contactName, or reason
        - in: query
          name: sortBy
          schema:
            {
              type: string,
              enum:
                [
                  "createdAt",
                  "updatedAt",
                  "quantity",
                  "status",
                  "preferredDate",
                ],
              default: "createdAt",
            }
          description: Field to sort by
        - in: query
          name: sortOrder
          schema: { type: integer, enum: [1, -1], default: -1 }
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of blood requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get facility blood requests successfully",
                    }
                  data:
                    {
                      type: array,
                      items: { $ref: "#/components/schemas/BloodRequest" },
                    }
                  metadata: { $ref: "#/components/schemas/Pagination" }
        "400":
          description: Invalid input
  /blood-request/facility/user/{userId}:
    get:
      summary: Get all blood requests for a specific user in a facility
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
          description: User ID
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of records per page
        - in: query
          name: status
          schema:
            {
              type: string,
              enum:
                ["pending", "approved", "rejected", "fulfilled", "cancelled"],
            }
          description: Filter by request status
        - in: query
          name: search
          schema: { type: string }
          description: Search term for patientName, contactName, or reason
        - in: query
          name: sortBy
          schema:
            {
              type: string,
              enum:
                [
                  "createdAt",
                  "updatedAt",
                  "quantity",
                  "status",
                  "preferredDate",
                ],
              default: "createdAt",
            }
          description: Field to sort by
        - in: query
          name: sortOrder
          schema: { type: integer, enum: [1, -1], default: -1 }
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of blood requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get facility user blood requests successfully",
                    }
                  data:
                    {
                      type: array,
                      items: { $ref: "#/components/schemas/BloodRequest" },
                    }
                  metadata: { $ref: "#/components/schemas/Pagination" }
        "400":
          description: Invalid input
  /blood-request/facility/{facilityId}:
    get:
      summary: Get all blood requests for a facility
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: facilityId
          required: true
          schema: { type: string }
          description: Facility ID
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of records per page
        - in: query
          name: status
          schema:
            {
              type: string,
              enum:
                ["pending", "approved", "rejected", "fulfilled", "cancelled"],
            }
          description: Filter by request status
        - in: query
          name: search
          schema: { type: string }
          description: Search term for patientName, contactName, or reason
        - in: query
          name: sortBy
          schema:
            {
              type: string,
              enum:
                [
                  "createdAt",
                  "updatedAt",
                  "quantity",
                  "status",
                  "preferredDate",
                ],
              default: "createdAt",
            }
          description: Field to sort by
        - in: query
          name: sortOrder
          schema: { type: integer, enum: [1, -1], default: -1 }
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of blood requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get facility blood requests successfully",
                    }
                  data:
                    {
                      type: array,
                      items: { $ref: "#/components/schemas/BloodRequest" },
                    }
                  metadata: { $ref: "#/components/schemas/Pagination" }
        "400":
          description: Invalid input
  /blood-request/facility/{facilityId}/user/{userId}:
    get:
      summary: Get all blood requests for a specific user in a facility
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: facilityId
          required: true
          schema: { type: string }
          description: Facility ID
        - in: path
          name: userId
          required: true
          schema: { type: string }
          description: User ID
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of records per page
        - in: query
          name: status
          schema:
            {
              type: string,
              enum:
                ["pending", "approved", "rejected", "fulfilled", "cancelled"],
            }
          description: Filter by request status
        - in: query
          name: search
          schema: { type: string }
          description: Search term for patientName, contactName, or reason
        - in: query
          name: sortBy
          schema:
            {
              type: string,
              enum:
                [
                  "createdAt",
                  "updatedAt",
                  "quantity",
                  "status",
                  "preferredDate",
                ],
              default: "createdAt",
            }
          description: Field to sort by
        - in: query
          name: sortOrder
          schema: { type: integer, enum: [1, -1], default: -1 }
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of blood requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get facility user blood requests successfully",
                    }
                  data:
                    {
                      type: array,
                      items: { $ref: "#/components/schemas/BloodRequest" },
                    }
                  metadata: { $ref: "#/components/schemas/Pagination" }
        "400":
          description: Invalid input
  /blood-request/facility/{facilityId}/{id}:
    get:
      summary: Get details of a facility's blood request
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: facilityId
          required: true
          schema: { type: string }
          description: Facility ID
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Blood request ID
      responses:
        "200":
          description: Blood request details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get blood request details successfully",
                    }
                  data: { $ref: "#/components/schemas/BloodRequest" }
        "400":
          description: Invalid request or unauthorized
  /blood-request/facility/{facilityId}/{id}/status:
    patch:
      summary: Update blood request status
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: facilityId
          required: true
          schema: { type: string }
          description: Facility ID
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Blood request ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  {
                    type: string,
                    enum:
                      [
                        "pending",
                        "approved",
                        "rejected",
                        "fulfilled",
                        "cancelled",
                      ],
                  }
                staffId: { type: string }
      responses:
        "200":
          description: Status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Update blood request status successfully",
                    }
                  data:
                    {
                      type: object,
                      properties:
                        {
                          _id: { type: string },
                          status: { type: string },
                          staffId: { type: string },
                          updatedAt: { type: string, format: date-time },
                        },
                    }
        "400":
          description: Invalid status or unauthorized
  /blood-request/user:
    get:
      summary: Get all blood requests for current user
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
          description: Page number for pagination
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          description: Number of records per page
        - in: query
          name: status
          schema:
            {
              type: string,
              enum:
                ["pending", "approved", "rejected", "fulfilled", "cancelled"],
            }
          description: Filter by request status
        - in: query
          name: search
          schema: { type: string }
          description: Search term for patientName, contactName, or reason
        - in: query
          name: sortBy
          schema:
            {
              type: string,
              enum:
                [
                  "createdAt",
                  "updatedAt",
                  "quantity",
                  "status",
                  "preferredDate",
                ],
              default: "createdAt",
            }
          description: Field to sort by
        - in: query
          name: sortOrder
          schema: { type: integer, enum: [1, -1], default: -1 }
          description: Sort order (1 for ascending, -1 for descending)
      responses:
        "200":
          description: List of blood requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get user blood requests successfully",
                    }
                  data:
                    {
                      type: array,
                      items: { $ref: "#/components/schemas/BloodRequest" },
                    }
                  metadata: { $ref: "#/components/schemas/Pagination" }
        "400":
          description: Invalid input
  /blood-request/user/{id}:
    get:
      summary: Get details of a user's blood request
      tags:
        - Blood Requests
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Blood request ID
      responses:
        "200":
          description: Blood request details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    {
                      type: string,
                      example: "Get blood request details successfully",
                    }
                  data: { $ref: "#/components/schemas/BloodRequest" }
        "400":
          description: Invalid request or unauthorized
  /facility:
    get:
      summary: Get all facilities
      tags:
        - Facility
      parameters:
        - in: query
          name: latitude
          schema:
            type: number
          description: User's latitude for distance calculation
        - in: query
          name: longitude
          schema:
            type: number
          description: User's longitude for distance calculation
        - in: query
          name: distance
          schema:
            type: number
          description: Maximum distance in kilometers
      responses:
        "200":
          description: Facilities retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Facility"
    post:
      summary: Create a new facility
      tags:
        - Facility
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "City Hospital"
                address:
                  type: string
                  example: "123 Main Street"
                longitude:
                  type: number
                  example: 106.700
                latitude:
                  type: number
                  example: 10.776
                contactPhone:
                  type: string
                  example: "0987654321"
                contactEmail:
                  type: string
                  format: email
                  example: "contact@hospital.com"
                managerId:
                  type: string
                  example: "60f7b3a4b9c4e1234567890"
                doctorIds:
                  type: string
                  example: "['60f7b3a4b9c4e1234567891', '60f7b3a4b9c4e1234567892']"
                nurseIds:
                  type: string
                  example: "['60f7b3a4b9c4e1234567893', '60f7b3a4b9c4e1234567894']"
                image:
                  type: string
                  format: binary
              required:
                - name
                - address
                - longitude
                - latitude
                - contactPhone
                - contactEmail
                - managerId
      responses:
        "201":
          description: Facility created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Facility"
  /facility/{id}:
    get:
      summary: Get facility by ID
      tags:
        - Facility
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Facility ID
      responses:
        "200":
          description: Facility retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Facility"
    put:
      summary: Update facility
      tags:
        - Facility
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Facility ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                longitude:
                  type: number
                latitude:
                  type: number
                contactPhone:
                  type: string
                contactEmail:
                  type: string
                isActive:
                  type: boolean
      responses:
        "200":
          description: Facility updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Facility"
  /facility/delete/{id}:
    put:
      summary: Delete facility (soft delete)
      tags:
        - Facility
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Facility ID
      responses:
        "200":
          description: Facility deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            _id:
              type: string
            fullName:
              type: string
            email:
              type: string
            role:
              type: string
              enum: [MEMBER, STAFF, ADMIN]
            avatar:
              type: string
              nullable: true
        tokens:
          type: object
          properties:
            accessToken:
              type: string
            refreshToken:
              type: string
    BloodDonationRegistration:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: object
          properties:
            _id:
              type: string
            fullName:
              type: string
            email:
              type: string
            phone:
              type: string
        facilityId:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            street:
              type: string
            city:
              type: string
        bloodGroupId:
          type: object
          properties:
            _id:
              type: string
            type:
              type: string
        bloodComponent:
          type: string
          enum: [Máu toàn phần, Hồng cầu, Huyết tương, Tiểu cầu]
        preferredDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, approved, rejected]
        source:
          type: string
          enum: [online, walk_in, campaign]
        notes:
          type: string
        location:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
        createdAt:
          type: string
          format: date-time
    BloodDonation:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: object
          properties:
            _id:
              type: string
            fullName:
              type: string
            email:
              type: string
            phone:
              type: string
        staffId:
          type: string
        bloodGroupId:
          type: object
          properties:
            _id:
              type: string
            type:
              type: string
        bloodDonationRegistrationId:
          type: object
          properties:
            _id:
              type: string
            preferredDate:
              type: string
              format: date-time
            facilityId:
              type: object
              properties:
                _id:
                  type: string
                name:
                  type: string
                street:
                  type: string
                city:
                  type: string
        bloodComponent:
          type: string
          enum: [whole_blood, red_cells, plasma, platelets]
        quantity:
          type: number
        donationDate:
          type: string
          format: date-time
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    BloodRequest:
      type: object
      properties:
        _id: { type: string }
        bloodId: { type: object, properties: { type: { type: string } } }
        userId:
          {
            type: object,
            properties:
              {
                fullName: { type: string },
                email: { type: string },
                phone: { type: string },
              },
          }
        facilityId:
          {
            type: object,
            properties:
              {
                name: { type: string },
                street: { type: string },
                city: { type: string },
              },
          }
        staffId:
          {
            type: object,
            properties:
              {
                fullName: { type: string },
                email: { type: string },
                phone: { type: string },
              },
          }
        patientName: { type: string }
        patientAge: { type: string }
        bloodComponent: { type: string }
        quantity: { type: number }
        isUrgent: { type: boolean }
        status: { type: string }
        location:
          {
            type: object,
            properties:
              {
                type: { type: string },
                coordinates: { type: array, items: { type: number } },
              },
          }
        street: { type: string }
        city: { type: string }
        contactName: { type: string }
        contactPhone: { type: string }
        contactEmail: { type: string }
        reason: { type: string }
        medicalDetails: { type: string }
        medicalDocumentUrl: { type: array, items: { type: string } }
        note: { type: string }
        preferredDate: { type: string, format: date-time }
        consent: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Facility:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        code:
          type: string
        address:
          type: string
        location:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
        contactPhone:
          type: string
        contactEmail:
          type: string
        mainImage:
          type: object
          properties:
            _id:
              type: string
            url:
              type: string
            isMain:
              type: boolean
        schedules:
          type: array
          items:
            type: object
            properties:
              dayOfWeek:
                type: number
                enum: [0, 1, 2, 3, 4, 5, 6]
              openTime:
                type: string
              closeTime:
                type: string
              isOpen:
                type: boolean
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Pagination:
      type: object
      properties:
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        totalPages: { type: integer }
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
