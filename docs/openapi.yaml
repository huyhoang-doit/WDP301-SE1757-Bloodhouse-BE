openapi: 3.0.3
info:
  title: BloodHouse API
  description: API for BloodHouse - Blood Donation Management System
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local Development

paths:
  /auth/sign-up:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                  example: Nguyen Van A
                email:
                  type: string
                  format: email
                  example: nguyenvana@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
              required:
                - full_name
                - email
                - password
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      full_name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: [MEMBER, STAFF, ADMIN]
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
        '400':
          description: Bad request (e.g., email already exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/sign-in:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: nguyenvana@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
              required:
                - email
                - password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      full_name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: [MEMBER, STAFF, ADMIN]
                      avatar:
                        type: string
                        nullable: true
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
        '400':
          description: Bad request (e.g., invalid credentials)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/sign-out:
    post:
      summary: User logout
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful
        '400':
          description: Bad request (e.g., user not found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            _id:
              type: string
            fullName:
              type: string
            email:
              type: string
            role:
              type: string
              enum: [MEMBER, STAFF, ADMIN]
            avatar:
              type: string
              nullable: true
        tokens:
          type: object
          properties:
            accessToken:
              type: string
            refreshToken:
              type: string
    ErrorResponse:
      type: object
      properties:
        message:
          type: string